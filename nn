#!/usr/bin/node

const fs = require("fs");
let args = process.argv.slice(2);

// Helper functions
function error(str) {
  console.error("\x1b[31m" + str + "\x1b[0m");
}
function notice(str) {
  console.error("\x1b[33m" + str + "\x1b[0m");
}

// Process flags
let rawFlag = false;
const rawFlagPos = args.indexOf("--raw");
if (rawFlagPos >= 0) {
  rawFlag = true;
  args.splice(rawFlagPos, 1);
  notice("Disabled auto formatting.");
}

// Get STDIN or file input
let data;
if (args.length > 1 && fs.existsSync(args[0])) {
  notice("Reading from file " + args[0]);
  try {
    data = fs.readFileSync(args[0], { encoding: "utf8" });
    args = args.slice(1);
  } catch (e) {
    console.error(e);
    error(`Could not read file "${args[0]}", exiting.`);
    process.exit(1);
  }
} else {
  notice("No file provided, reading from STDIN.");
  data = String(fs.readFileSync(0));
  if (data.trim().length === 0) {
    error("Recevied no data from STDIN, exiting.");
    process.exit(1);
  }
}

// TODO Prettier error output
// Process user code
if (args.length < 1) {
  error(`Missing code argument.`);
  console.error(
    `Usage:
    cat file.json | nn \"a.map(x => x.prop)\""
    cat --raw file.json | nn \"a.map(x => x.prop)\""
`
  );
  process.exit(1);
}
const code = args[0];

// Formatting input data
const split = data.split("\n");
const nonEmptyLines = split.filter((line) => Boolean(line.trim()));
function commaCount(line) {
  return (line.match(/,/g) || []).length;
}
if (nonEmptyLines.length > 0) {
  try {
    data = JSON.parse(data);
    notice("Parsed as JSON");
  } catch (e) {
    const commasInFirstLine = commaCount(nonEmptyLines[0]);
    if (
      commasInFirstLine > 0 &&
      nonEmptyLines.every((line) => commaCount(line) == commasInFirstLine)
    ) {
      // TODO Improve CSV parsing
      data = split.map((line) => line.split(","));
      notice("Parsed as CSV");
    } else {
      notice("Parsed as plain text");
    }
  }
}

// Eval user code
eval(code);

// Format output of user code
if (!["string", "number"].includes(typeof data)) {
  let mightBeCSV =
    Array.isArray(data) &&
    data.length &&
    data.every(Array.isArray) &&
    data.every((arr) => arr.length === data[0].length);

  if (mightBeCSV) {
    data = data.map((line) => line.join(",")).join("\n");
    notice("Serializing as CSV");
  } else {
    data = JSON.stringify(data);
    notice("Serializing as JSON");
  }
} else {
  notice("Serializing as plain text");
}

// Write to STDOUT
process.stdout.write(data);
